/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type CommentsQueryVariables = Types.Exact<{
  providerId?: Types.InputMaybe<Types.Scalars['Int']>;
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  cursor?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  paginationType?: Types.InputMaybe<Types.PaginationType>;
}>;


export type CommentsQueryResult = { __typename?: 'Query', comments?: { __typename?: 'CommentsQueryResults', cursor?: number | null, count?: number | null, comments: Array<{ __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null }> } | null };

export type ParentChildCommentFieldsFragment = { __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null };

export type CommentFieldsFragment = { __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null, parent?: { __typename?: 'Comment', id: number } | null, children?: Array<{ __typename?: 'Comment', id: number, message?: string | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null }> | null, providerLikes?: Array<{ __typename?: 'ProviderLike', provider?: { __typename?: 'Provider', id: number } | null }> | null, clientLikes?: Array<{ __typename?: 'ClientLike', client?: { __typename?: 'Client', id: number } | null }> | null };

export const ParentChildCommentFieldsFragmentDoc = `
    fragment ParentChildCommentFields on Comment {
  id
  message
  parent {
    id
  }
  children {
    id
    message
  }
  providerLikes {
    provider {
      id
    }
  }
  clientLikes {
    client {
      id
    }
  }
}
    `;
export const CommentFieldsFragmentDoc = `
    fragment CommentFields on Comment {
  id
  message
  parent {
    id
  }
  children {
    ...ParentChildCommentFields
  }
  providerLikes {
    provider {
      id
    }
  }
  clientLikes {
    client {
      id
    }
  }
}
    ${ParentChildCommentFieldsFragmentDoc}`;
export const CommentsDocument = `
    query comments($providerId: Int, $limit: Int, $cursor: Int, $page: Int, $paginationType: PaginationType) {
  comments(
    providerId: $providerId
    limit: $limit
    cursor: $cursor
    page: $page
    paginationType: $paginationType
  ) {
    comments {
      id
      message
      parent {
        ...CommentFields
      }
      children {
        ...CommentFields
      }
      providerLikes {
        provider {
          id
        }
      }
      clientLikes {
        client {
          id
        }
      }
    }
    cursor
    count
  }
}
    ${CommentFieldsFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    comments: build.query<CommentsQueryResult, CommentsQueryVariables | void>({
      query: (variables) => ({ document: CommentsDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useCommentsQuery, useLazyCommentsQuery } = injectedRtkApi;

