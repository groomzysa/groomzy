/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type ProviderQueryVariables = Types.Exact<{
  providerId?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type ProviderQueryResult = { __typename?: 'Query', provider?: { __typename?: 'Provider', id: number, tradingName?: string | null, phone?: string | null, addresses?: Array<{ __typename?: 'Address', id: number, streetNumber?: string | null, streetName?: string | null, town?: string | null, city?: string | null, province?: string | null, areaCode?: string | null }> | null, operatingTimes?: Array<{ __typename?: 'OperatingTime', id: number, day?: Types.DayType | null, opens?: string | null, closes?: string | null }> | null, staffs?: Array<{ __typename?: 'Staff', id: number, firstName?: string | null, lastName?: string | null }> | null } | null };


export const ProviderDocument = `
    query provider($providerId: Int) {
  provider(providerId: $providerId) {
    id
    tradingName
    phone
    addresses {
      id
      streetNumber
      streetName
      town
      city
      province
      areaCode
    }
    operatingTimes {
      id
      day
      opens
      closes
    }
    staffs {
      id
      firstName
      lastName
    }
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    provider: build.query<ProviderQueryResult, ProviderQueryVariables | void>({
      query: (variables) => ({ document: ProviderDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useProviderQuery, useLazyProviderQuery } = injectedRtkApi;

