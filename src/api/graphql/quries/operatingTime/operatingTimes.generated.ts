/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type OperatingTimesQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  cursor?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  paginationType?: Types.InputMaybe<Types.PaginationType>;
}>;


export type OperatingTimesQueryResult = { __typename?: 'Query', operatingTimes?: { __typename?: 'OperatingTimesQueryResults', days: Array<Types.DayType>, cursor?: number | null, count?: number | null, operatingTimes: Array<{ __typename?: 'OperatingTime', id: number, day?: Types.DayType | null, opens?: string | null, closes?: string | null }> } | null };


export const OperatingTimesDocument = `
    query operatingTimes($limit: Int, $cursor: Int, $page: Int, $paginationType: PaginationType) {
  operatingTimes(
    limit: $limit
    cursor: $cursor
    page: $page
    paginationType: $paginationType
  ) {
    operatingTimes {
      id
      day
      opens
      closes
    }
    days
    cursor
    count
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    operatingTimes: build.query<OperatingTimesQueryResult, OperatingTimesQueryVariables | void>({
      query: (variables) => ({ document: OperatingTimesDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useOperatingTimesQuery, useLazyOperatingTimesQuery } = injectedRtkApi;

