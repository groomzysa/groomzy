/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type ServiceQueryVariables = Types.Exact<{
  serviceId: Types.Scalars['Int'];
}>;


export type ServiceQueryResult = { __typename?: 'Query', service: { __typename?: 'Service', id: number, name?: string | null, description?: string | null, price?: number | null, duration?: number | null, durationUnit?: Types.DurationUnitType | null, inHouse?: boolean | null, category?: Types.CategoryType | null } };


export const ServiceDocument = `
    query service($serviceId: Int!) {
  service(serviceId: $serviceId) {
    id
    name
    description
    price
    duration
    durationUnit
    inHouse
    category
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    service: build.query<ServiceQueryResult, ServiceQueryVariables>({
      query: (variables) => ({ document: ServiceDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useServiceQuery, useLazyServiceQuery } = injectedRtkApi;

